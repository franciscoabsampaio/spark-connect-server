name: Build Iceberg Spark Images

on:
  push:
    branches: [ main ]

jobs:
  load-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Load matrix JSON
        id: set-matrix
        run: |
          MATRIX_JSON=$(jq -c . VERSIONS.json)
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  build:
    needs: load-matrix
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.24-dind
        options: --privileged

    strategy:
      matrix:
        include: ${{ fromJSON(needs.load-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create image ENV variable
        run: |
          IMAGE=${{ github.repository_owner }}/spark-connect-server:${{ matrix.catalog }}${{ matrix.catalog_version }}-spark${{ matrix.spark_version }}-java${{ matrix.java_version }}-scala${{ matrix.scala_version }}
          echo "Building image: $IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build ./${{ matrix.catalog }} \
          --build-arg CATALOG_VERSION=${{ matrix.catalog_version }} \
          --build-arg JAVA_VERSION=${{ matrix.java_version }} \
          --build-arg SCALA_VERSION=${{ matrix.scala_version }} \
          --build-arg SPARK_VERSION=${{ matrix.spark_version }} \
          -t ${{ env.IMAGE }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Test Docker image
        run: |
          pip install -r tests/requirements.txt
          pip install pyspark==${{ matrix.spark_version }}

          CATALOG=${{ matrix.catalog }} \
          CATALOG_VERSION=${{ matrix.catalog_version }} \
          JAVA_VERSION=${{ matrix.java_version }} \
          SCALA_VERSION=${{ matrix.scala_version }} \
          SPARK_VERSION=${{ matrix.spark_version }} \
            pytest -vs tests/

      - name: Tag selected image as latest
        if: >
          (
            matrix.java_version == '17' &&
            matrix.spark_version == '3.5.7' &&
            matrix.scala_version == '2.12'
          ) && (
            (matrix.catalog == 'delta' && matrix.catalog_version == '3.3.2') ||
            (matrix.catalog == 'iceberg' && matrix.catalog_version == '1.6')
          )
        run: |
          IMAGE_BASE=${{ github.repository_owner }}/spark-connect-server
          
          echo "Tagging ${{ env.IMAGE }} as ${{ matrix.catalog }}-latest and ${{ matrix.catalog }}"
          docker tag "${{ env.IMAGE }}" "${IMAGE_BASE}:${{ matrix.catalog }}-latest"
          docker tag "${{ env.IMAGE }}" "${IMAGE_BASE}:${{ matrix.catalog }}"
          docker images "${IMAGE_BASE}"

      - name: Push image with all tags
        run: |
          docker push --all-tags ${{ github.repository_owner }}/spark-connect-server
